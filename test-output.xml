<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="10" time="0.117" timestamp="2022-10-05T16:23:26.788568" hostname="LAPTOP-I0MC04RM"><testcase classname="tests.test_ghappy" name="test_ghappy[there is only one g]" time="0.003" /><testcase classname="tests.test_ghappy" name="test_ghappy[there are two g's but separated]" time="0.004" /><testcase classname="tests.test_ghappy" name="test_ghappy[there are two g's next to each other]" time="0.002" /><testcase classname="tests.test_ghappy" name="test_ghappy[there are three g's next to each other]" time="0.002" /><testcase classname="tests.test_ghappy" name="test_ghappy[there are two g's next to each other and a 3rd is not]" time="0.012" /><testcase classname="tests.test_ghappy" name="test_ghappy[String length is 1 g]" time="0.002"><failure message="AssertionError: Expected False, but ghappy(g returned True)&#10;assert False == True">string = 'g', result = False

    @pytest.mark.parametrize("string, result",
        [
            pytest.param(
                "xxgxx", False,
                id="there is only one g"
            ),
            pytest.param(
                "xgxgx", False,
                id="there are two g's but separated"
            ),
            pytest.param(
                "xxggx", True,
                id="there are two g's next to each other"
            ),
            pytest.param(
                "xgggx", True,
                id="there are three g's next to each other"
            ),
            pytest.param(
                "xggxgx", False,
                id="there are two g's next to each other and a 3rd is not"
            ),
            pytest.param(
                "g", False,
                id="String length is 1 g"
            ),
            pytest.param(
                "gg", True,
                id="String length is 2 g"
            ),
            pytest.param(
                "xgg", True,
                id="String length is 3 with two continguent g's"
            ),
            pytest.param(
                "ggxxxx", True,
                id="The g's are at the start of the string"
            ),
            pytest.param(
                "xxxgg", True,
                id="The g's are at the end of the string"
            )
        ]
    )
    def test_ghappy(string, result):
        actual = ghappy(string)
        expected = result
        message = "Expected {0}, but ghappy({1} returned {2})"\
            .format(expected, string, actual)
&gt;       assert expected == actual, message
E       AssertionError: Expected False, but ghappy(g returned True)
E       assert False == True

tests/test_ghappy.py:75: AssertionError</failure></testcase><testcase classname="tests.test_ghappy" name="test_ghappy[String length is 2 g]" time="0.001" /><testcase classname="tests.test_ghappy" name="test_ghappy[String length is 3 with two continguent g's]" time="0.003" /><testcase classname="tests.test_ghappy" name="test_ghappy[The g's are at the start of the string]" time="0.003" /><testcase classname="tests.test_ghappy" name="test_ghappy[The g's are at the end of the string]" time="0.001" /></testsuite></testsuites>